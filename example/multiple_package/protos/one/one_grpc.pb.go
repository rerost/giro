// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: protos/one/one.proto

package one_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GiroService_GiroTest1_FullMethodName = "/example.multiple_package.protos.one.GiroService/GiroTest1"
	GiroService_GiroTest2_FullMethodName = "/example.multiple_package.protos.one.GiroService/GiroTest2"
)

// GiroServiceClient is the client API for GiroService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GiroServiceClient interface {
	GiroTest1(ctx context.Context, in *GiroTestRequest1, opts ...grpc.CallOption) (*GiroTestResponse1, error)
	GiroTest2(ctx context.Context, in *GiroTestRequest2, opts ...grpc.CallOption) (*GiroTestResponse2, error)
}

type giroServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGiroServiceClient(cc grpc.ClientConnInterface) GiroServiceClient {
	return &giroServiceClient{cc}
}

func (c *giroServiceClient) GiroTest1(ctx context.Context, in *GiroTestRequest1, opts ...grpc.CallOption) (*GiroTestResponse1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GiroTestResponse1)
	err := c.cc.Invoke(ctx, GiroService_GiroTest1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giroServiceClient) GiroTest2(ctx context.Context, in *GiroTestRequest2, opts ...grpc.CallOption) (*GiroTestResponse2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GiroTestResponse2)
	err := c.cc.Invoke(ctx, GiroService_GiroTest2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GiroServiceServer is the server API for GiroService service.
// All implementations must embed UnimplementedGiroServiceServer
// for forward compatibility.
type GiroServiceServer interface {
	GiroTest1(context.Context, *GiroTestRequest1) (*GiroTestResponse1, error)
	GiroTest2(context.Context, *GiroTestRequest2) (*GiroTestResponse2, error)
	mustEmbedUnimplementedGiroServiceServer()
}

// UnimplementedGiroServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGiroServiceServer struct{}

func (UnimplementedGiroServiceServer) GiroTest1(context.Context, *GiroTestRequest1) (*GiroTestResponse1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiroTest1 not implemented")
}
func (UnimplementedGiroServiceServer) GiroTest2(context.Context, *GiroTestRequest2) (*GiroTestResponse2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiroTest2 not implemented")
}
func (UnimplementedGiroServiceServer) mustEmbedUnimplementedGiroServiceServer() {}
func (UnimplementedGiroServiceServer) testEmbeddedByValue()                     {}

// UnsafeGiroServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GiroServiceServer will
// result in compilation errors.
type UnsafeGiroServiceServer interface {
	mustEmbedUnimplementedGiroServiceServer()
}

func RegisterGiroServiceServer(s grpc.ServiceRegistrar, srv GiroServiceServer) {
	// If the following call pancis, it indicates UnimplementedGiroServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GiroService_ServiceDesc, srv)
}

func _GiroService_GiroTest1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiroTestRequest1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiroServiceServer).GiroTest1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiroService_GiroTest1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiroServiceServer).GiroTest1(ctx, req.(*GiroTestRequest1))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiroService_GiroTest2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiroTestRequest2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiroServiceServer).GiroTest2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiroService_GiroTest2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiroServiceServer).GiroTest2(ctx, req.(*GiroTestRequest2))
	}
	return interceptor(ctx, in, info, handler)
}

// GiroService_ServiceDesc is the grpc.ServiceDesc for GiroService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GiroService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.multiple_package.protos.one.GiroService",
	HandlerType: (*GiroServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GiroTest1",
			Handler:    _GiroService_GiroTest1_Handler,
		},
		{
			MethodName: "GiroTest2",
			Handler:    _GiroService_GiroTest2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/one/one.proto",
}
