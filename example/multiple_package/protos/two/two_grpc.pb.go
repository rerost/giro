// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: protos/two/two.proto

package two_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BqvService_BqvTest1_FullMethodName = "/example.multiple_package.protos.two.BqvService/BqvTest1"
	BqvService_BqvTest2_FullMethodName = "/example.multiple_package.protos.two.BqvService/BqvTest2"
)

// BqvServiceClient is the client API for BqvService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BqvServiceClient interface {
	BqvTest1(ctx context.Context, in *BqvTestRequest1, opts ...grpc.CallOption) (*BqvTestResponse1, error)
	BqvTest2(ctx context.Context, in *BqvTestRequest2, opts ...grpc.CallOption) (*BqvTestResponse2, error)
}

type bqvServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBqvServiceClient(cc grpc.ClientConnInterface) BqvServiceClient {
	return &bqvServiceClient{cc}
}

func (c *bqvServiceClient) BqvTest1(ctx context.Context, in *BqvTestRequest1, opts ...grpc.CallOption) (*BqvTestResponse1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BqvTestResponse1)
	err := c.cc.Invoke(ctx, BqvService_BqvTest1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bqvServiceClient) BqvTest2(ctx context.Context, in *BqvTestRequest2, opts ...grpc.CallOption) (*BqvTestResponse2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BqvTestResponse2)
	err := c.cc.Invoke(ctx, BqvService_BqvTest2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BqvServiceServer is the server API for BqvService service.
// All implementations must embed UnimplementedBqvServiceServer
// for forward compatibility.
type BqvServiceServer interface {
	BqvTest1(context.Context, *BqvTestRequest1) (*BqvTestResponse1, error)
	BqvTest2(context.Context, *BqvTestRequest2) (*BqvTestResponse2, error)
	mustEmbedUnimplementedBqvServiceServer()
}

// UnimplementedBqvServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBqvServiceServer struct{}

func (UnimplementedBqvServiceServer) BqvTest1(context.Context, *BqvTestRequest1) (*BqvTestResponse1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BqvTest1 not implemented")
}
func (UnimplementedBqvServiceServer) BqvTest2(context.Context, *BqvTestRequest2) (*BqvTestResponse2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BqvTest2 not implemented")
}
func (UnimplementedBqvServiceServer) mustEmbedUnimplementedBqvServiceServer() {}
func (UnimplementedBqvServiceServer) testEmbeddedByValue()                    {}

// UnsafeBqvServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BqvServiceServer will
// result in compilation errors.
type UnsafeBqvServiceServer interface {
	mustEmbedUnimplementedBqvServiceServer()
}

func RegisterBqvServiceServer(s grpc.ServiceRegistrar, srv BqvServiceServer) {
	// If the following call pancis, it indicates UnimplementedBqvServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BqvService_ServiceDesc, srv)
}

func _BqvService_BqvTest1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BqvTestRequest1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BqvServiceServer).BqvTest1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BqvService_BqvTest1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BqvServiceServer).BqvTest1(ctx, req.(*BqvTestRequest1))
	}
	return interceptor(ctx, in, info, handler)
}

func _BqvService_BqvTest2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BqvTestRequest2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BqvServiceServer).BqvTest2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BqvService_BqvTest2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BqvServiceServer).BqvTest2(ctx, req.(*BqvTestRequest2))
	}
	return interceptor(ctx, in, info, handler)
}

// BqvService_ServiceDesc is the grpc.ServiceDesc for BqvService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BqvService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.multiple_package.protos.two.BqvService",
	HandlerType: (*BqvServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BqvTest1",
			Handler:    _BqvService_BqvTest1_Handler,
		},
		{
			MethodName: "BqvTest2",
			Handler:    _BqvService_BqvTest2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/two/two.proto",
}
