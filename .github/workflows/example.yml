name: Check Example

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  check_docker_build:
    runs-on: ubuntu-latest
    name: Check Docker Build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
    - name: Build and Test
      run: |
        # Build with minimal cache configuration
        docker build \
          --cache-from type=gha,scope=${{ github.ref_name }} \
          --cache-to type=gha,mode=max,scope=${{ github.ref_name }} \
          -t test \
          ./example/multiple_package/server

        # Start services with correct ports and health check
        docker run -d -p 5001:5001 test  # Ruby gRPC server
        APP_PORT=5000 go run example/multiple_package/main.go &  # Go reflection server
        
        # Install grpcurl for health checks
        go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest
        
        # Wait for services to be ready with gRPC health checks
        echo "Waiting for Ruby gRPC server..."
        timeout 30s bash -c 'until grpcurl -plaintext localhost:5001 list > /dev/null 2>&1; do sleep 1; done'
        echo "Ruby gRPC server is ready"
        
        echo "Waiting for Go reflection server..."
        timeout 30s bash -c 'until grpcurl -plaintext localhost:5000 list > /dev/null 2>&1; do sleep 1; done'
        echo "Go reflection server is ready"

        # Run tests sequentially
        echo -e "example.multiple_package.protos.one.GiroService\nexample.multiple_package.protos.two.BqvService\ngrpc.health.v1.Health\ngrpc.reflection.v1.ServerReflection\ngrpc.reflection.v1alpha.ServerReflection\nrerost.giro.v1.HostService" > ls_expect.txt
        go run cmd/giro/main.go ls --reflection-server=localhost:5000 > ls_result.txt
        diff ls_result.txt ls_expect.txt

        echo "{\"message\":\"test\"}" > call_expect.txt
        go run cmd/giro/main.go call --reflection-server=localhost:5000 --rpc-server=localhost:5001 example.multiple_package.protos.one.GiroService/GiroTest1 '{"message": "test"}' > call_result.txt
        diff call_result.txt call_expect.txt

  check_make_protoc:
    runs-on: ubuntu-latest
    name: Check `make protoc`
    steps:
    - name: Install Protoc
      uses: arduino/setup-protoc@v3
      with:
        version: "29.x"
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
    - uses: ruby/setup-ruby@v1
      with:
        working-directory: example/multiple_package/
    - name: Install grpc_tools_ruby_protoc
      run: gem install grpc-tools
    - name: Check
      run: cd example/multiple_package/ &&  make protoc && git diff --exit-code
